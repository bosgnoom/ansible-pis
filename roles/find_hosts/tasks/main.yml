---
# Goal:
# Find connected raspberry pis:
#  - New devices (to be set up)
#  - Master node
#  - Worker nodes
#
# - Double check that nmap is installed on localhost
# - Determine which RPI's are online.
# - Check if they're freshly flashed (new image) --> defaultdevices

# Include dict of mac_address_mapping
- include_vars: group_vars/vars.yml

# Run a ping sweep. All hosts will reply. Hereby the hosts arp cache is filled.
- name: Running nmap to fill arp cache
  command: nmap --send-ip -sP 192.168.178.0/24

# Check which RPI's are online by checking the arp table for known mac addresses
- name: Checking mac_address_mapping for online RPI's
  command: awk '{ if (toupper($4) == toupper("{{ item.key }}")) print $1 }' /proc/net/arp
  register: ip_list
  loop: "{{ mac_address_mapping | dict2items }}"

# Analyze results from ping sweep. Unexpected ip address is a default device
- name: Finding defaultdevices
  add_host:
    name: "{{ item.stdout }}"
    groups:
      - defaultdevices
    # TODO: move these to a proper location (https://docs.ansible.com/ansible/2.3/playbooks_best_practices.html#best-practices-for-variables-and-vaults)
    ansible_user: pi
    ansible_ssh_pass: raspberry
  when: (item.stdout != "") and
    (item.stdout != mac_address_mapping[item.item.key].ip)
  loop: "{{ ip_list.results }}"

# Set master node group by IP address in mac_address_mapping
- name: Set master node group
  add_host:
    name: "{{ master_ip }}"
    groups:
      - master
    ansible_user: pi

# Set worker node group by IP address in mac_address_mapping
- name: Set node group
  add_host:
    name: "{{ item.value.ip }}"
    groups:
      - nodes
    ansible_user: pi
  when: ( item.value.type == "node")
  loop: "{{ mac_address_mapping | dict2items }}"
